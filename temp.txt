// Initial Seed
Random.InitState(seed);

wallMatrices = new List<Matrix4x4>();
wallMatrixArrayList = new List<Matrix4x4[]>();

int labyrinthSizeNewX = ((int)labyrinthSize.x) / 2;
int labyrinthSizeNewY = ((int)labyrinthSize.y) / 2;

wallCountX = labyrinthSizeNewX >= 2 ? labyrinthSizeNewX / 2 : 1;
wallCountY = labyrinthSizeNewY >= 2 ? labyrinthSizeNewY / 2 : 1;

for (int i = 0; i < (int)Grid.x; i++)
{
    for (int j = 0; j < (int)Grid.y; j++)
    {
        // Offset each grid cell
        Vector3 gridOffset = new Vector3(i * (labyrinthSizeNewX + wallSpacing), 0, j * (labyrinthSizeNewY + wallSpacing));

        // Define wall axes configurations
        var wallConfigs = new List<WallConfig>
        {
            new WallConfig
            {
                Count = wallCountX,
                StartPosition = transform.position + gridOffset + new Vector3(-(labyrinthSizeNewX - 2), 0, 0),
                Direction = Vector3.right,
                Rotation = Quaternion.identity
            },
            new WallConfig
            {
                Count = wallCountY,
                StartPosition = transform.position + gridOffset + new Vector3(-labyrinthSizeNewX - 0.5f, 0, 2.5f),
                Direction = Vector3.forward,
                Rotation = Quaternion.Euler(0f, 90f, 0f)
            },
            new WallConfig
            {
                Count = wallCountX,
                StartPosition = transform.position + gridOffset + new Vector3(-(labyrinthSizeNewX - 2), 0, wallCountY * wallSpacing + 1f),
                Direction = Vector3.right,
                Rotation = Quaternion.identity
            },
            new WallConfig
            {
                Count = wallCountY,
                StartPosition = transform.position + gridOffset + new Vector3(labyrinthSizeNewX + 0.5f, 0, 2.5f),
                Direction = Vector3.forward,
                Rotation = Quaternion.Euler(0f, 90f, 0f)
            }
        };

        // Generate walls for the current grid cell
        foreach (var config in wallConfigs)
        {
            for (int k = 0; k < config.Count; k++)
            {
                Vector3 wallTransform = config.StartPosition + config.Direction * (wallSpacing * k);
                Matrix4x4 mat = Matrix4x4.TRS(wallTransform, config.Rotation, Vector3.one);
                wallMatrices.Add(mat);
            }
        }
    }
}

// Convert to array and add to list
wallMatrixArray = wallMatrices.ToArray();
wallMatrixArrayList.Add(wallMatrixArray);